# Generated by Django 2.0.7 on 2018-10-08 08:48

# This works for initial data migration

from django.conf import settings
from django.db import migrations


def save_languages(apps, schema_editor):

    if not settings.MIGRATE_INITIAL_DATA:
        return

    Language = apps.get_model('dashboard', 'Language')

    languages_list_1 = [
        Language(locale_id="de_DE", lang_name="German", locale_alias="de", locale_script="Latn", lang_status=True),
        Language(locale_id="es_ES", lang_name="Spanish", locale_alias="es", locale_script="Latn", lang_status=True),
        Language(locale_id="fr_FR", lang_name="French", locale_alias="fr", locale_script="Latn", lang_status=True),
        Language(locale_id="it_IT", lang_name="Italian", locale_alias="it", locale_script="Latn", lang_status=True),
        Language(locale_id="ja_JP", lang_name="Japanese", locale_alias="ja", locale_script="Hani", lang_status=True),
        Language(locale_id="ko_KR", lang_name="Korean", locale_alias="ko", locale_script="Hang", lang_status=True),
        Language(locale_id="pt_PT", lang_name="Portuguese", locale_alias="pt", locale_script="Latn", lang_status=True),
        Language(locale_id="pt_BR", lang_name="Portuguese (Brazil)", locale_alias=None, locale_script="Latn", lang_status=True),
        Language(locale_id="ru_RU", lang_name="Russian", locale_alias="ru", locale_script="Cyrl", lang_status=True),
        Language(locale_id="zh_CN", lang_name="Chinese (Simplified)", locale_alias="zh-Hans", locale_script="Hans", lang_status=True),
        Language(locale_id="zh_TW", lang_name="Chinese (Traditional)", locale_alias="zh-Hant", locale_script="Hant", lang_status=True),
    ]

    languages_list_2 = [
        Language(locale_id="af_ZA", lang_name="Afrikaans", locale_alias="af", locale_script="Latn", lang_status=True),
        Language(locale_id="sq_AL", lang_name="Albanian", locale_alias="sq", locale_script="Latn", lang_status=True),
        Language(locale_id="ar_EG", lang_name="Arabic", locale_alias="ar", locale_script="Arab", lang_status=True),
        Language(locale_id="as_IN", lang_name="Assamese", locale_alias="as", locale_script="Beng", lang_status=True),
        Language(locale_id="eu_ES", lang_name="Basque", locale_alias="eu", locale_script="Latn", lang_status=True),
        Language(locale_id="be_BY", lang_name="Belarusian", locale_alias="be", locale_script="Cyrl", lang_status=True),
        Language(locale_id="bn_BD", lang_name="Bengali", locale_alias="bn", locale_script="Beng", lang_status=True),
        Language(locale_id="bg_BG", lang_name="Bulgarian", locale_alias="bg", locale_script="Cyrl", lang_status=True),
        Language(locale_id="my_MM", lang_name="Burmese", locale_alias="my", locale_script="Mymr", lang_status=True),
        Language(locale_id="ca_ES", lang_name="Catalan", locale_alias="ca", locale_script="Latn", lang_status=True),
        Language(locale_id="hr_HR", lang_name="Croatian", locale_alias="hr", locale_script="Latn", lang_status=True),
        Language(locale_id="cs_CZ", lang_name="Czech", locale_alias="cs", locale_script="Latn", lang_status=True),
        Language(locale_id="da_DK", lang_name="Danish", locale_alias="da", locale_script="Latn", lang_status=True),
        Language(locale_id="nl_NL", lang_name="Dutch", locale_alias="nl", locale_script="Latn", lang_status=True),
        Language(locale_id="en_GB", lang_name="English (UK)", locale_alias=None, locale_script="Latn", lang_status=True),
        Language(locale_id="fi_FI", lang_name="Finnish", locale_alias="fi", locale_script="Latn", lang_status=True),
        Language(locale_id="fur_IT", lang_name="Friulian", locale_alias="fur", locale_script="Latn", lang_status=True),
        Language(locale_id="gl_ES", lang_name="Galician", locale_alias="gl", locale_script="Latn", lang_status=True),
        Language(locale_id="ka_GE", lang_name="Georgian", locale_alias="ka", locale_script="Geor", lang_status=True),
        Language(locale_id="el_GR", lang_name="Greek", locale_alias="el", locale_script="Grek", lang_status=True),
        Language(locale_id="gu_IN", lang_name="Gujarati", locale_alias="gu", locale_script="Gujr", lang_status=True),
        Language(locale_id="he_IL", lang_name="Hebrew", locale_alias="he", locale_script="Hebr", lang_status=True),
        Language(locale_id="hi_IN", lang_name="Hindi", locale_alias="hi", locale_script="Deva", lang_status=True),
        Language(locale_id="hu_HU", lang_name="Hungarian", locale_alias="hu", locale_script="Latn", lang_status=True),
        Language(locale_id="id_ID", lang_name="Indonesian", locale_alias="id", locale_script="Latn", lang_status=True),
        Language(locale_id="kn_IN", lang_name="Kannada", locale_alias="kn", locale_script="Knda", lang_status=True),
        Language(locale_id="kk_KZ", lang_name="Kazakh", locale_alias="kk", locale_script="Cyrl", lang_status=True),
        Language(locale_id="km_KH", lang_name="Khmer", locale_alias="km", locale_script="Khmr", lang_status=True),
        Language(locale_id="lt_LT", lang_name="Lithuanian", locale_alias="lt", locale_script="Latn", lang_status=True),
        Language(locale_id="mk_MK", lang_name="Macedonian", locale_alias="mk", locale_script="Cyrl", lang_status=True),
        Language(locale_id="mai_IN", lang_name="Maithili", locale_alias="mai", locale_script="Deva", lang_status=True),
        Language(locale_id="ms_MY", lang_name="Malay", locale_alias="ms", locale_script="Latn", lang_status=True),
        Language(locale_id="ml_IN", lang_name="Malayalam", locale_alias="ml", locale_script="Mlym", lang_status=True),
        Language(locale_id="mr_IN", lang_name="Marathi", locale_alias="mr", locale_script="Deva", lang_status=True),
        Language(locale_id="mn_MN", lang_name="Mongolian", locale_alias="mn", locale_script="Cyrl", lang_status=True),
        Language(locale_id="ne_NP", lang_name="Nepali", locale_alias="ne", locale_script="Deva", lang_status=True),
        Language(locale_id="nb_NO", lang_name="Norwegian Bokmal", locale_alias="nb", locale_script="Latn", lang_status=True),
        Language(locale_id="nn_NO", lang_name="Norwegian Nynorsk", locale_alias="nn", locale_script="Latn", lang_status=True),
        Language(locale_id="or_IN", lang_name="Odia", locale_alias="or", locale_script="Odia", lang_status=True),
        Language(locale_id="fa_IR", lang_name="Persian", locale_alias="fa", locale_script="Arab", lang_status=True),
        Language(locale_id="pl_PL", lang_name="Polish", locale_alias="pl", locale_script="Latn", lang_status=True),
        Language(locale_id="pa_IN", lang_name="Punjabi", locale_alias="pa", locale_script="Guru", lang_status=True),
        Language(locale_id="pa_PK", lang_name="Punjabi (Arabic)", locale_alias=None, locale_script="Arab", lang_status=True),
        Language(locale_id="ro_RO", lang_name="Romanian", locale_alias="ro", locale_script="Latn", lang_status=True),
        Language(locale_id="sr_RS", lang_name="Serbian", locale_alias="sr", locale_script="Cyrl", lang_status=True),
        Language(locale_id="sr_RS@latin", lang_name="Serbian (Latin)", locale_alias="sr@latin", locale_script="Latn", lang_status=True),
        Language(locale_id="gd_GB", lang_name="Scottish Gaelic", locale_alias="gd", locale_script="Latn", lang_status=True),
        Language(locale_id="si_LK", lang_name="Sinhala", locale_alias="si", locale_script="Sinh", lang_status=True),
        Language(locale_id="sk_SK", lang_name="Slovak", locale_alias="sk", locale_script="Latn", lang_status=True),
        Language(locale_id="sv_SE", lang_name="Swedish", locale_alias="sv", locale_script="Latn", lang_status=True),
        Language(locale_id="ta_IN", lang_name="Tamil", locale_alias="ta", locale_script="Taml", lang_status=True),
        Language(locale_id="te_IN", lang_name="Telugu", locale_alias="te", locale_script="Telu", lang_status=True),
        Language(locale_id="th_TH", lang_name="Thai", locale_alias="th", locale_script="Thai", lang_status=True),
        Language(locale_id="tr_TR", lang_name="Turkish", locale_alias="tr", locale_script="Latn", lang_status=True),
        Language(locale_id="uk_UA", lang_name="Ukrainian", locale_alias="uk", locale_script="Cyrl", lang_status=True),
        Language(locale_id="ur_PK", lang_name="Urdu", locale_alias="ur", locale_script="Arab", lang_status=True),
        Language(locale_id="vi_VN", lang_name="Vietnamese", locale_alias="vi", locale_script="Latn", lang_status=True),
        Language(locale_id="xh_ZA", lang_name="Xhosa", locale_alias="xh", locale_script="Latn", lang_status=True),
        Language(locale_id="yo_NG", lang_name="Yoruba", locale_alias="yo", locale_script="Latn", lang_status=True),
        Language(locale_id="zu_ZA", lang_name="Zulu", locale_alias="zu", locale_script="Latn", lang_status=True)
    ]

    languages = languages_list_1 if not settings.FAS_AUTH else languages_list_1 + languages_list_2
    Language.objects.bulk_create(sorted(languages, key=lambda x: x.locale_id))


def save_language_sets(apps, schema_editor):

    if not settings.MIGRATE_INITIAL_DATA:
        return

    LanguageSet = apps.get_model('dashboard', 'LanguageSet')

    lang_set_ids = "{af_ZA,sq_AL,ar_EG,as_IN,eu_ES,be_BY,bn_BD,bg_BG,my_MM,ca_ES,zh_CN,zh_TW," \
                   "hr_HR,cs_CZ,da_DK,nl_NL,en_GB,fi_FI,fr_FR,fur_IT,gl_ES,de_DE,ka_GE,el_GR," \
                   "gu_IN,he_IL,hi_IN,hu_HU,id_ID,it_IT,ja_JP,kn_IN,kk_KZ,km_KH,ko_KR,lt_LT,mk_MK," \
                   "mai_IN,ms_MY,ml_IN,mr_IN,mn_MN,ne_NP,nb_NO,nn_NO,or_IN,fa_IR,pl_PL,pt_PT,pt_BR," \
                   "pa_IN,pa_PK,ro_RO,ru_RU,sr_RS,sr_RS@latin,gd_GB,si_LK,sk_SK,es_ES,sv_SE,ta_IN," \
                   "te_IN,th_TH,tr_TR,uk_UA,ur_PK,vi_VN,xh_ZA,yo_NG,zu_ZA}" if settings.FAS_AUTH \
        else "{de_DE, es_ES, fr_FR, it_IT, ja_JP, ko_KR, pt_PT, pt_BR, ru_RU, zh_CN, zh_TW}"

    language_set_1 = [
        LanguageSet(lang_set_name="Master Set", lang_set_slug="master-set",
                    lang_set_color="Grey", locale_ids=lang_set_ids),
        LanguageSet(lang_set_name="All Enabled", lang_set_slug="all-enabled",
                    lang_set_color="LightSeaGreen", locale_ids=lang_set_ids)
    ]

    language_set_2 = [
        LanguageSet(lang_set_name="Internal", lang_set_slug="internal", lang_set_color="MediumPurple",
                    locale_ids='{de_DE,es_ES,fr_FR,it_IT,ja_JP,ko_KR,pt_BR,ru_RU,zh_CN,zh_TW}'),
    ]

    language_sets = language_set_1 if not settings.FAS_AUTH else language_set_1 + language_set_2
    LanguageSet.objects.bulk_create(language_sets)


def save_platforms(apps, schema_editor):

    if not settings.MIGRATE_INITIAL_DATA:
        return

    Platform = apps.get_model('dashboard', 'Platform')

    platforms_1 = [
        Platform(engine_name="damnedlies", subject="public", api_url="https://l10n.gnome.org",
                 platform_slug="DMLSPUB", server_status=True),
        Platform(engine_name="zanata", subject="public", api_url="https://translate.zanata.org",
                 platform_slug="ZNTAPUB", server_status=True)
    ]

    platforms_2 = [
        Platform(engine_name="zanata", subject="fedora", api_url="https://fedora.zanata.org",
                 platform_slug="ZNTAFED", server_status=True)
    ]

    platforms = platforms_1 if not settings.FAS_AUTH else platforms_1 + platforms_2
    Platform.objects.bulk_create(platforms)


def save_products(apps, schema_editor):

    if not settings.MIGRATE_INITIAL_DATA:
        return

    Product = apps.get_model('dashboard', 'Product')

    if settings.FAS_AUTH:
        product_fedora = [
            Product(product_name="Fedora", product_slug="fedora",
                    product_server="https://koji.fedoraproject.org/kojihub",
                    product_build_system="koji", src_pkg_format="srpm",
                    top_url="https://kojipkgs.fedoraproject.org", web_url="https://koji.fedoraproject.org/koji/",
                    krb_service=None, auth_type="FAS", amqp_server=None, msgbus_exchange="fedmsg",
                    major_milestones="{Testing Phase, Alpha Release, String Freeze, "
                                     "Translation Deadline, Beta Release, Launch Phase, GA}",
                    product_phases="{Planning, Development, Freeze, Release, Maintenance, Unsupported}",
                    product_status=True)
        ]
        Product.objects.bulk_create(product_fedora)


def save_job_templates(apps, schema_editor):

    if not settings.MIGRATE_INITIAL_DATA:
        return

    JobTemplate = apps.get_model('dashboard', 'JobTemplate')

    job_templates = [
        JobTemplate(job_template_type="syncupstream", job_template_name="Sync Package Upstream",
                    job_template_desc="Clone package upstream repository, "
                                      "filter translations and calculate translation statistics.",
                    job_template_params="{package_name}",
                    job_template_json_str='{"job":{"name":"upstream stats","type":"syncupstream",'
                                          '"exception":"raise","execution":"sequential",'
                                          '"package":"%PACKAGE_NAME%","return_type":"json",'
                                          '"tasks":["clone: git repo","filter: PO files","calculate: Stats"]}}'
                    ),
        JobTemplate(job_template_type="syncdownstream", job_template_name="Sync Package Build System",
                    job_template_desc="Download and Unpack SRPM from latest build, "
                                      "filter translations and calculate statistics.",
                    job_template_params="{package_name,build_system,build_tag}",
                    job_template_json_str='{"job":{"name":"downstream stats","type":"syncdownstream",'
                                          '"buildsys":"%BUILD_SYSTEM%","exception":"raise","execution":"sequential",'
                                          '"package":"%PACKAGE_NAME%","return_type":"json","tags":"%BUILD_TAG%",'
                                          '"tasks":["get: latest build info","download: SRPM","unpack: SRPM",'
                                          '"load: Spec file","unpack: tarball","apply: patch","filter: PO files",'
                                          '"calculate: Stats"]}}'
                    ),
        JobTemplate(job_template_type="stringchange", job_template_name="Track String Change",
                    job_template_desc="Generate translation template from source and compare it "
                                      "with translation platform.",
                    job_template_params="{package_name,release_slug}",
                    job_template_json_str='{"job":{"release":"%RELEASE_SLUG%","exception":"raise",'
                                          '"execution":"sequential","name":"string change","package":"%PACKAGE_NAME%",'
                                          '"return_type":"json","tasks":[{"clone":[{"name":"git repo"},'
                                          '{"branch":"master"},{"recursive":"true"}]},{"generate":[{"name":"POT file"},'
                                          '{"domain":"%PACKAGE_NAME%"},'
                                          '{"cmd":"cd po && intltool-update --pot --gettext-package=%PACKAGE_NAME%"}]},'
                                          '{"download":[{"name": "Platform POT file"}]},'
                                          '{"calculate":"Diff"}],"type":"stringchange"}}'
                    ),
    ]

    JobTemplate.objects.bulk_create(job_templates)


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(save_languages),
        migrations.RunPython(save_language_sets),
        migrations.RunPython(save_platforms),
        migrations.RunPython(save_products),
        migrations.RunPython(save_job_templates),
    ]

    def unapply(self, project_state, schema_editor, collect_sql=False):
        pass
